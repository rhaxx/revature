Java

What is Java? / Why Java?
What is JRE / JDK / JVM?
-Java is an object oriented programming language.
-It's free.
-Portable.
-Rich API.
-Backed up by Oracle.
-No "pointers."
-JDK: Java Development Kit contains the JRE and development tools like the compiler.
-JRE: Java Runtime Environment contains the JVM and library classes.
-JVM: Java Virtual Machine is where compiled java code can be executed.

What is an object / class?
-A class is like a contract that outlines varioues states and behaviours.
-An object is an actual instance of a class.

What is the root class from which every class extends?
-The Object class is the root class of all classes.

What are the 4 pillars of OOP / Explain each?
-Inheritance: The ability for a child class to extend and "inherit" the states and behaviours of a parent class.
-Encapsulation: The ability to restrict access to data within certain classes at various levels.
-Polymorphism: The ability to overload and override methods of a parent class by using a child class.
-Abstraction: The ability to give an application a high level overview without showing how things happen behind the scenes.

What is the difference between an abstract class and an interface?
-An abstract class needs to be extended.
-An interface needs to be implemented.

What are the implicit modifiers for interface variables?
-public, static, and final

What are the primitive data types in Java?
-char, float, double, int, boolean, byte, long, void, short

What is the difference between method overloading and overriding?
-overriding is when a child class extends a parent class and rewrites the implementation of a method with the same signature.
-overloading is when a class' method is written with the same name but different method signature: different number of parameters,
paramater types, different return type, etc.

Difference between extends and implements?
-extends is used by a child to inherit from a parent class, be it abstract or not.
-implements is used to define the various methods of an interface by creating a new
class that would then implement that interface.

What are collections in Java?

What are the interfaces in the Collections API?

What is the difference between a Set and a List?

What is the difference between an Array and an ArrayList?

What is the difference between ArrayList and Vector?


What is the difference between TreeSet and HashSet?

What is the difference between HashTable and HashMap?


Are Maps in the Collections API?

Where are Strings stored?


What are generics? What is the diamond operator (<>)?

What are enumerations (enums)?

What are annotations?


Explain stack vs heap?


What is a POJO? What is a bean?

What is the difference between final, .finalize(), and finally?

Do you need a catch block? Can have more than 1? Order of them?


What is base class of all exceptions? What interface do they all implement?


List some checked and unchecked exceptions?

What is a Marker interface?


Why are strings immutable in java?


What is the difference between String, StringBuilder, and StringBuffer?


What are the access modifiers in Java? Explain them.


What are the non-access modifiers in Java?

What is the difference between static and final variables?

What are the default values for all data types in Java?

What are the implicit modifiers for interface variables / methods?

What is a wrapper class?

What is autoboxing / unboxing?

What is Reflection API?
			
Is Java pass-by-value or pass-by-reference?

What is the difference between == and .equals()?

throw vs throws vs Throwable?

First line of constructor?

What is JUnit?

What is TDD?

What are the annotations in JUnit? Order of execution?

Give an example of a test case?

What is Maven?

What is the Maven lifecycle?

Where / when does Maven retrieve dependencies from? Where are they stored locally?


What is the POM and what is the pom.xml?


What methods are available in the Object class?


What is an enhanced for loop and what is a forEach loop?

What is try-with-resources? What interface must the resource implement to use this feature?

What are covariant return types?

What are 3 usages of super keyword?

Can you overload / override a main method? static method? a private method? a default method? a protected method?

How to pass multiple values with a single parameter into a method?

What is static block?

What is static imports?

What makes a class immutable?

If two objects are equal, do they have the same hashcode? If not equal?

What data types are supported in switch statements?

List all non-access modifiers?

Which collections cannot hold null values?

If 2 interfaces have identical default methods and you implement both, what happens?

If 2 interfaces have same variable names and you implement both, what happens?

Why does HashTable not take null keys?

Multi-catch block - can you catch more than one exception in a single catch block?

